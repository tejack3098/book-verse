import React, { useEffect, useState } from 'react';
import { getCurrentUserOrders } from '../../services/OrderService';
import { IOrder } from '../../models/IOrder';
import { IOrderItem } from '../../models/IOrderItem';
import { IReview } from '../../models/IReview';
import { submitReview } from '../../services/ReviewService';
import { Title,
  Container, OrderList, OrderItem, OrderDetails, OrderDate,
  NoOrdersMessage, ReviewButton, ErrorMessage, LoadingMessage,
  ReviewModal, ModalContent, CloseButton, ModalSelect,
  ModalTextArea, SubmitButton, StarRating, SuccessAlert
} from './styles';

const OrderHistory: React.FC = () => {
  const [orders, setOrders] = useState<IOrder[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [modalOpen, setModalOpen] = useState<boolean>(false);
  const [selectedBookId, setSelectedBookId] = useState<string | null>(null);
  const [newReview, setNewReview] = useState<{ book_id: string; rating: number; review_text: string }>({
    book_id: '',
    rating: 0,
    review_text: ''
  });
  const [success, setSuccess] = useState<boolean>(false);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const userOrders = await getCurrentUserOrders();
        setOrders(userOrders || []);
      } catch (error) {
        setError('Failed to fetch orders. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, []);

  const handleReviewChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    setNewReview({ ...newReview, [e.target.name]: e.target.value });
  };

  const handleStarRatingChange = (rating: number) => {
    setNewReview({ ...newReview, rating });
  };

  const handleSubmitReview = async () => {
    const userId = localStorage.getItem('userId');
    if (!userId || !selectedBookId) {
      setError('User is not logged in or book ID is missing.');
      return;
    }

    const reviewData: IReview = {
      id: '', // This will be generated by your backend
      user_id: userId,
      book_id: selectedBookId,
      rating: newReview.rating,
      review_text: newReview.review_text,
      date_added: new Date().toISOString(),
    };

    try {
      await submitReview(reviewData);
      setNewReview({ book_id: '', rating: 0, review_text: '' });
      setSuccess(true);
      setModalOpen(false);
      setTimeout(() => setSuccess(false), 3000); // Hide success message after 3 seconds
    } catch (error) {
      setError('Failed to submit review. Please try again.');
    }
  };

  const openReviewModal = (order: IOrder) => {
    setSelectedBookId(order.items.length > 0 ? order.items[0].bookId : null);
    setModalOpen(true);
  };

  const closeReviewModal = () => {
    setModalOpen(false);
    setSelectedBookId(null);
  };

  const handleBookChange = (bookId: string) => {
    setSelectedBookId(bookId);
  };

  if (loading) {
    return <LoadingMessage>Loading...</LoadingMessage>;
  }

  if (error) {
    return <ErrorMessage>{error}</ErrorMessage>;
  }

  if (!orders || orders.length === 0) {
    return <NoOrdersMessage>No orders found.</NoOrdersMessage>;
  }

  return (
    <Container>
      <Title>Order History</Title>
      {success && <SuccessAlert>Review added successfully!</SuccessAlert>}
      <OrderList>
        {orders.map((order) => (
          <OrderItem key={order.orderId}>
            <OrderDetails>
              <h3>Order #{order.orderId}</h3>
              <OrderDate>Delivery Date: {order.deliveryDate}</OrderDate>
              <p><strong>Total:</strong> ${order.total.toFixed(2) || '0.00'}</p>
              <p><strong>Shipping:</strong> ${order.shipping?.toFixed(2) || '0.00'}</p>
              <h4>Items:</h4>
              <ul>
                {order.items.map((item: IOrderItem) => (
                  <li key={item.bookId}>
                    {item.title} - ${item.priceperunit} x {item.quantity}
                  </li>
                ))}
              </ul>
              <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
                <ReviewButton onClick={() => openReviewModal(order)}>
                  Add Review
                </ReviewButton>
              </div>
            </OrderDetails>
          </OrderItem>
        ))}
      </OrderList>

      {modalOpen && (
        <ReviewModal>
          <ModalContent>
            <CloseButton onClick={closeReviewModal}>&times;</CloseButton>
            <h4>Add a Review</h4>
            <ModalSelect
              name="book_id"
              value={selectedBookId || ''}
              onChange={(e) => handleBookChange(e.target.value)}
            >
              <option value="" disabled>Select a book</option>
              {orders.find(order => order.items.some(item => item.bookId === selectedBookId))?.items.map(item => (
                <option key={item.bookId} value={item.bookId}>
                  {item.title}
                </option>
              ))}
            </ModalSelect>
            <StarRating>
              {[...Array(5)].map((_, index) => (
                <React.Fragment key={index}>
                  <input
                    type="radio"
                    id={`star${index + 1}`}
                    name="rating"
                    value={index + 1}
                    onChange={() => handleStarRatingChange(index + 1)}
                    checked={newReview.rating === index + 1}
                  />
                  <label htmlFor={`star${index + 1}`}>&#9733;</label>
                </React.Fragment>
              ))}
            </StarRating>
            <ModalTextArea
              name="review_text"
              placeholder="Write your review here..."
              value={newReview.review_text}
              onChange={handleReviewChange}
            />
            <SubmitButton onClick={handleSubmitReview}>Submit Review</SubmitButton>
          </ModalContent>
        </ReviewModal>
      )}
    </Container>
  );
};

export default OrderHistory;
